Conversation opened. 1 read message.

Skip to content
Using Gmail with screen readers
Frontend task

Felista Gor <fellygor@gmail.com>
Aug 27, 2025, 3:09â€¯PM (3 days ago)
to me

Task: Build a Cryptocurrency Dashboard Tracker
:dart: Objective:
Develop a fully responsive and modern cryptocurrency dashboard tracker using React, integrating with the CoinGecko API, to provide users with real-time crypto data in a clean, interactive format.
This tool should allow users to track prices, volume, market cap, and changes across top cryptocurrencies in real time.
:hammer_and_wrench: Tech Stack:
Frontend: React (functional components + hooks)
Styling: Tailwind CSS or CSS Modules (keep it clean)
API: CoinGecko (no auth required, free access)
Charting (optional): Chart.js / Recharts / ApexCharts
Deployment: Vercel / Netlify / Firebase Hosting
Extras: Axios, Framer Motion
:white_check_mark: Functionality Requirements:
Realtime cryptocurrency prices
Interactive historical price charts
Search functionality for specific coins
Dark Mode for better UX
Fully responsive design (desktop + mobile)
:package: Deliverables:
Live link to deployed app (Vercel / Netlify / Firebase)
GitHub repo (public, clear folder structure)
Proper README with setup instructions + live link
Fully responsive UI
Clean, well-commented, maintainable code
:books: Resources:
CoinGecko API Docs: https://www.coingecko.com/en/api/documentation
API Key Setup: https://docs.coingecko.com/v3.0.1/reference/setting-up-your-api-key
import React, { useState, useEffect } from 'react';
import { Line } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';

ChartJS.register(
    CategoryScale,
    LinearScale,
    PointElement,
    LineElement,
    Title,
    Tooltip,
    Legend
);

// CoinGecko API URL and options
const API_BASE_URL = 'https://api.coingecko.com/api/v3';
const API_OPTIONS = {
    method: 'GET',
    headers: {
        'Content-Type': 'application/json'
    }
};

const formatPrice = (price, currency) => {
    if (price === null) return 'N/A';
    return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: currency.toUpperCase()
    }).format(price);
};

const formatMarketCap = (marketCap) => {
    if (marketCap === null) return 'N/A';
    if (marketCap >= 1e12) return `${(marketCap / 1e12).toFixed(2)}T`;
    if (marketCap >= 1e9) return `${(marketCap / 1e9).toFixed(2)}B`;
    if (marketCap >= 1e6) return `${(marketCap / 1e6).toFixed(2)}M`;
    return new Intl.NumberFormat('en-US').format(marketCap);
};

const App = () => {
    const [cryptos, setCryptos] = useState([]);
    const [allCryptos, setAllCryptos] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [searchTerm, setSearchTerm] = useState('');
    const [currency, setCurrency] = useState('usd');
    const [showChartModal, setShowChartModal] = useState(false);
    const [chartData, setChartData] = useState(null);
    const [chartTitle, setChartTitle] = useState('');
    const [chartDays, setChartDays] = useState(1);
    const [selectedCoinId, setSelectedCoinId] = useState(null);

    // Fetch crypto data from CoinGecko API
    const fetchCryptos = async (selectedCurrency) => {
        setLoading(true);
        setError(null);
        try {
            const url = `${API_BASE_URL}/coins/markets?vs_currency=${selectedCurrency}&order=market_cap_desc&per_page=100&page=1&price_change_percentage=24h`;
            const response = await fetch(url, API_OPTIONS);
            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }
            const data = await response.json();
            setAllCryptos(data);
            setCryptos(data);
        } catch (err) {
            console.error('Failed to fetch cryptocurrencies:', err);
            setError(`Error fetching data: ${err.message}. Please try again later.`);
        } finally {
            setLoading(false);
        }
    };

    // Fetch chart data for a specific crypto
    const fetchChartData = async (coinId, days) => {
        setChartData(null);
        setChartTitle('Loading Chart...');
        try {
            const url = `${API_BASE_URL}/coins/${coinId}/market_chart?vs_currency=${currency}&days=${days}`;
            const response = await fetch(url, API_OPTIONS);
            if (!response.ok) {
                throw new Error(`API error: ${response.statusText}`);
            }
            const data = await response.json();
            const prices = data.prices;

            const labels = prices.map(price => {
                const date = new Date(price[0]);
                return days < 2 ? date.toLocaleTimeString() : date.toLocaleDateString();
            });

            const priceData = prices.map(price => price[1]);
            const coinName = allCryptos.find(c => c.id === coinId)?.name;

            setChartData({
                labels: labels,
                datasets: [
                    {
                        label: `Price (${currency.toUpperCase()})`,
                        data: priceData,
                        borderColor: '#0ea5e9',
                        backgroundColor: 'rgba(14, 165, 233, 0.2)',
                        borderWidth: 2,
                        tension: 0.1,
                        pointRadius: 0
                    },
                ],
            });
            setChartTitle(`${coinName} Price Chart`);
        } catch (err) {
            console.error('Failed to fetch chart data:', err);
            setChartTitle('Error Loading Chart');
        }
    };

    // Initial data fetch on component mount
    useEffect(() => {
        fetchCryptos(currency);
    }, [currency]);

    // Handle search input
    useEffect(() => {
        const filteredCryptos = allCryptos.filter(crypto =>
            crypto.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
            crypto.symbol.toLowerCase().includes(searchTerm.toLowerCase())
        );
        setCryptos(filteredCryptos);
    }, [searchTerm, allCryptos]);

    const handleCardClick = (coinId) => {
        setSelectedCoinId(coinId);
        setShowChartModal(true);
        setChartDays(1);
    };

    useEffect(() => {
        if (showChartModal && selectedCoinId) {
            fetchChartData(selectedCoinId, chartDays);
        }
    }, [showChartModal, selectedCoinId, chartDays]);

    const chartOptions = {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
            legend: {
                labels: {
                    color: '#cbd5e1'
                }
            }
        },
        scales: {
            x: {
                grid: { color: '#334155' },
                ticks: { color: '#94a3b8' }
            },
            y: {
                grid: { color: '#334155' },
                ticks: { color: '#94a3b8' }
            }
        },
    };

    return (
        <div className="min-h-screen bg-slate-950 text-slate-200 font-sans p-6 md:p-10">
            <div className="container mx-auto">
                <header className="text-center mb-10">
                    <h1 className="text-4xl md:text-5xl font-bold text-sky-400 mb-2">Crypto Dashboard</h1>
                    <p className="text-lg text-slate-400">Real-time market data powered by CoinGecko</p>
                </header>

                <div className="flex flex-col md:flex-row items-center justify-between mb-8 space-y-4 md:space-y-0 md:space-x-4">
                    <div className="relative w-full md:w-1/2">
                        <input
                            type="text"
                            placeholder="Search for a crypto..."
                            value={searchTerm}
                            onChange={(e) => setSearchTerm(e.target.value)}
                            className="w-full pl-10 pr-4 py-2 rounded-full bg-slate-800 text-white placeholder-gray-400 border border-slate-700 focus:outline-none focus:ring-2 focus:ring-sky-500"
                        />
                        <svg xmlns="http://www.w3.org/2000/svg" className="absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                        </svg>
                    </div>
                    <div className="w-full md:w-auto">
                        <select
                            value={currency}
                            onChange={(e) => setCurrency(e.target.value)}
                            className="w-full md:w-auto rounded-full bg-slate-800 text-white border border-slate-700 py-2 px-4 focus:outline-none focus:ring-2 focus:ring-sky-500"
                        >
                            <option value="usd">USD</option>
                            <option value="eur">EUR</option>
                            <option value="jpy">JPY</option>
                        </select>
                    </div>
                </div>

                {loading && (
                    <div className="text-center text-slate-400 flex flex-col items-center">
                        <svg className="animate-spin h-10 w-10 text-sky-500 mb-3" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                        </svg>
                        <span>Loading cryptocurrencies...</span>
                    </div>
                )}

                {error && (
                    <div className="text-center text-red-500 mt-4">
                        <p>{error}</p>
                    </div>
                )}

                {!loading && !error && (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
                        {cryptos.length > 0 ? (
                            cryptos.map(crypto => (
                                <div
                                    key={crypto.id}
                                    className="bg-slate-800 rounded-xl p-6 shadow-md cursor-pointer transition-transform transform hover:scale-105 hover:shadow-lg"
                                    onClick={() => handleCardClick(crypto.id)}
                                >
                                    <div className="flex items-center space-x-4 mb-4">
                                        <img src={crypto.image} alt={crypto.name} className="h-10 w-10 rounded-full" onError={(e) => { e.target.onerror = null; e.target.src = "https://placehold.co/40x40/252f40/8e9ba9?text=C"; }} />
                                        <div>
                                            <h3 className="text-xl font-semibold text-white">{crypto.name}</h3>
                                            <p className="text-slate-400 uppercase">{crypto.symbol}</p>
                                        </div>
                                    </div>
                                    <div className="space-y-2">
                                        <div className="flex justify-between items-center">
                                            <span className="text-slate-400">Current Price</span>
                                            <span className="text-white font-medium">{formatPrice(crypto.current_price, currency)}</span>
                                        </div>
                                        <div className="flex justify-between items-center">
                                            <span className="text-slate-400">24h Change</span>
                                            <span className={crypto.price_change_percentage_24h >= 0 ? 'text-green-500 font-medium' : 'text-red-500 font-medium'}>
                                                {crypto.price_change_percentage_24h !== null ? crypto.price_change_percentage_24h.toFixed(2) + '%' : 'N/A'}
                                            </span>
                                        </div>
                                        <div className="flex justify-between items-center">
                                            <span className="text-slate-400">Market Cap</span>
                                            <span className="text-white font-medium">{formatMarketCap(crypto.market_cap)}</span>
                                        </div>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <div className="col-span-full text-center text-slate-400">No cryptocurrencies found.</div>
                        )}
                    </div>
                )}
            </div>

            {/* Chart Modal */}
            {showChartModal && (
                <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-slate-900 bg-opacity-75 backdrop-blur-sm" onClick={(e) => e.target.classList.contains('backdrop-blur-sm') && setShowChartModal(false)}>
                    <div className="bg-slate-900 rounded-lg shadow-2xl p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto transform scale-100 transition-transform duration-300">
                        <div className="flex justify-between items-center mb-4">
                            <h2 className="text-2xl font-bold text-white">{chartTitle}</h2>
                            <button onClick={() => setShowChartModal(false)} className="text-slate-400 hover:text-white transition-colors">
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M6 18L18 6M6 6l12 12" />
                                </svg>
                            </button>
                        </div>
                        <div className="mb-4 flex flex-wrap space-x-2">
                            {['1', '7', '30', '365'].map(days => (
                                <button
                                    key={days}
                                    onClick={() => setChartDays(days)}
                                    className={`px-4 py-2 rounded-full font-medium transition-colors ${chartDays == days ? 'bg-sky-500 text-white' : 'bg-slate-800 text-white hover:bg-slate-700'}`}
                                >
                                    {days === '1' ? '24H' : days === '7' ? '7D' : days === '30' ? '30D' : '1Y'}
                                </button>
                            ))}
                        </div>
                        <div className="h-80">
                            {chartData ? <Line data={chartData} options={chartOptions} /> : (
                                <div className="flex justify-center items-center h-full">
                                    <svg className="animate-spin h-10 w-10 text-sky-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default App;
